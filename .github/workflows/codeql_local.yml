name: Local CodeQL

on:
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write

jobs:
  local_codeql:
    name: Local CodeQL Scan (isolated env)
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download and cache CodeQL CLI
        run: |
          if [[ ! -x "${HOME}/codeql-cli/codeql/codeql" ]]; then
            CODEQL_VERSION="2.18.2"
            echo "Downloading CodeQL CLI v${CODEQL_VERSION}..."
            wget -q "https://github.com/github/codeql-cli-binaries/releases/download/v${CODEQL_VERSION}/codeql-linux64.zip" -O /tmp/codeql.zip
            mkdir -p "${HOME}/codeql-cli"
            unzip -q /tmp/codeql.zip -d "${HOME}/codeql-cli"
            rm /tmp/codeql.zip
          else
            echo "Using cached CodeQL CLI."
          fi
          echo "${HOME}/codeql-cli/codeql" >> "$GITHUB_PATH"

      - name: Download CodeQL Python query pack
        run: codeql pack download codeql/python-queries

      - name: Run CodeQL Analysis
        run: |
          DB_PATH="${RUNNER_TEMP}/codeql-db"
          SARIF_PATH="${RUNNER_TEMP}/codeql_local.sarif"
          echo "SARIF_PATH=${SARIF_PATH}" >> "$GITHUB_ENV"
          # Clean up previous database
          rm -rf "${DB_PATH}"
          # Create database
          codeql database create --language=python "${DB_PATH}"
          # Analyze database
          codeql database analyze "${DB_PATH}" --format=sarif-latest \
            --output="${SARIF_PATH}" codeql/python-queries

      - name: Summarize CodeQL findings to logs
        if: ${{ always() }}
        run: |
          python - << 'PY'
          import json, sys, os
          path = os.environ.get("SARIF_PATH")
          if not path or not os.path.exists(path):
              print(
                  f"CodeQL findings: 0 (no SARIF file found at '{path}')"
              )
              sys.exit(0)
          with open(path, 'r', encoding='utf-8') as f:
              sarif = json.load(f)
          results = (sarif.get('runs') or [{}])[0].get('results') or []
          count = len(results)
          print(f'\nCodeQL findings: {count}')
          if count > 0:
              for i, r in enumerate(results[:20], 1):
                  msg = (r.get('message') or {}).get('text') or ''
                  loc = (
                      (r.get('locations') or [{}])[0]
                      .get('physicalLocation') or {}
                  )
                  file = (
                      (loc.get('artifactLocation') or {})
                      .get('uri') or 'unknown-file'
                  )
                  line = (loc.get('region') or {}).get('startLine') or 1
                  rule = r.get('ruleId') or 'unknown-rule'
                  print(f"{i}. {rule} at {file}:{line} - {msg}")
          PY
